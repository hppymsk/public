#Project Euler Problems


class Euler:
    def __init__(self):
        self.solved_problems = 4
        self.description = ''
        self.answer = 0

    def all_answers(self):
        for i in range(1, self.solved_problems+1):
            answer = 'problem_' + str(i)
            print('Problem ', i, ': ', getattr(self, answer)(), sep='')
        return
    
    #accepts an integer and returns True if it is prime
    def isitprime(self, n):
        if (n <= 1) :
            return False
        if (n <= 3) :
            return True
        if (n % 2 == 0 or n % 3 == 0) :
            return False
        i = 5
        while(i * i <= n) :
            if (n % i == 0 or n % (i + 2) == 0) :
                return False
            i = i + 6
        return True
    
    #accepts an integer and returns a list of primes of n length
    def primelist(self, howmany):
        listofprimes = []
        i = 1
        while len(listofprimes) < howmany:
            if self.isitprime(i):
                listofprimes.append(i)
            i += 1
        #for i in range(1, howmany):
        #    if self.isitprime(i):
        #        listofprimes.append(i)
        return listofprimes

    def stringreverse(self, s):
        s = str(s)
        s = list(s)
        r = ''
        for i in range(len(s)-1, -1, -1):
            #r.append(s[i])
            r += s[i]
        return r

    def problem_1(self):
        self.description = ('If we list all the natural numbers below 10 that are '
                       'multiples of 3 or 5, we get 3, 5, 6 and 9. '
                       'The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.')
        self.answer = 233168
        
        sumlist = []
        for i in range(3, 1000):
            if i % 3 == 0 or i % 5 == 0:
                sumlist.append(i)

        return sum(sumlist)

    def problem_2(self):
        self.description = ('Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:'
                            '1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...'
                            'By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.')
        self.answer = 4613732
        fibb1 = 1
        fibb2 = 2
        fibblist = []
        while True:
            if fibb1 >= 4000000:
                break
            fibblist.append(fibb1)
            fibbnew = fibb1
            fibb1 = fibb2
            fibb2 = fibbnew + fibb2
        fibbeven = []
        for i in range(1, len(fibblist)):
            if fibblist[i] % 2 == 0:
                fibbeven.append(fibblist[i])
        
        return sum(fibbeven)
    
    def problem_3(self):
        self.description = ('The prime factors of 13195 are 5, 7, 13 and 29.'
                            'What is the largest prime factor of the number 600851475143 ?')
        self.answer = 6857
        primefactor = []
        num = 600851475143
        prime = self.primelist(100000)
        for i in range(0, len(prime)):
            if num % prime[i] == 0:
                primefactor.append(prime[i])
        print(primefactor)
        return primefactor
    
    def problem_4(self):
        self.description = ('A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.'
                            'Find the largest palindrome made from the product of two 3-digit numbers.')
        self.answer = 906609
        palindrome = 0
        for i in range(100, 1000):
            for j in range(100, 1000):
                x = i * j
                y = int(self.stringreverse(x))
                if x == y and x >= palindrome:
                    palindrome = x
        return palindrome
    
    def problem_5(self):
        self.description = ('2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.'
                            'What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?')
        self.answer = 232792560

        i = 0
        divisible = True
        while True:
            i += 20
            divisible = True
            for x in range(2, 20):
                if i % x != 0:
                    divisible = False
                    break
            if divisible == True:
                break
        return i

    def problem_6(self):
        self.description = ('The sum of the squares of the first ten natural numbers is, 385'
                            'The square of the sum of the first ten natural numbers is, 3025'
                            'Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .'
                            'Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.')
        self.answer = 25164150
        sumofsquare = 0
        squareofsum = 0
        for i in range(1, 101):
            sumofsquare += i ** 2
        for i in range (1,101):
            squareofsum += i
        squareofsum = squareofsum ** 2
        difference = abs(sumofsquare - squareofsum)
        
        return difference
    
    def problem_7(self):
        self.description = ('What is the 10001st prime number')
        self.answer = 104743
        prime = self.primelist(10001)
        
        return prime[-1]
    
    def problem_8(self):
        self.description = ('The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.'
                            'Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?')
        self.answer = 23514624000
        digit = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
        digit = list(digit)
        highest = 0
        for x in range((len(digit)-12)):
            multiply = 1
            for y in range(0,13):
                multiply *= int(digit[x+y])
            if multiply > highest:
                highest = multiply
        return highest

def main():
    E = Euler()

    print(E.problem_8())

if __name__ == '__main__':
    main()